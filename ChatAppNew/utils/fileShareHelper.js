import * as FileSystem from 'expo-file-system/legacy';
import * as Sharing from 'expo-sharing';
import { Alert, Platform } from 'react-native';
import { PublicAndroidDownloads } from './publicAndroidDownloads';

/**
 * Simple file sharing utility for easy access to Downloads
 */
export class FileShareHelper {
  
  /**
   * Download and offer sharing options to user
   */
  static async downloadAndShare(fileUrl, fileName, options = {}) {
    try {
      console.log('üì• Starting download and share for:', fileName);
      
      // Show loading if callback provided
      if (options.onStart) {
        options.onStart();
      }
      
      // Download file first
      const tempFileName = `temp_${Date.now()}_${fileName}`;
      const tempUri = `${FileSystem.documentDirectory}${tempFileName}`;
      
      console.log('üîÑ Downloading file...');
      const downloadResult = await FileSystem.downloadAsync(fileUrl, tempUri);
      
      if (downloadResult.status !== 200) {
        throw new Error(`Download failed: HTTP ${downloadResult.status}`);
      }
      
      console.log('‚úÖ File downloaded, offering share options...');
      
      // Hide loading if callback provided
      if (options.onComplete) {
        options.onComplete();
      }
      
      // Show action sheet with options
      this.showShareOptions(tempUri, fileName, options);
      
      return { success: true, tempUri };
      
    } catch (error) {
      console.error('‚ùå Download and share error:', error);
      
      if (options.onError) {
        options.onError(error);
      }
      
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: ${error.message}`);
      return { success: false, error: error.message };
    }
  }
  
  /**
   * Show share options to user
   */
  static showShareOptions(fileUri, fileName, options = {}) {
    const isAndroid = Platform.OS === 'android';
    const isIOS = Platform.OS === 'ios';
    
    if (isIOS) {
      // iOS: Direct sharing for easy save
      Alert.alert(
        '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå',
        `‡πÑ‡∏ü‡∏•‡πå: ${fileName}\n\nüì± ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "Save to Files" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏õ‡∏ó‡∏µ‡πà Downloads ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£`,
        [
          { text: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', style: 'cancel', onPress: () => this.cleanup(fileUri) },
          {
            text: 'üì± ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå',
            onPress: () => this.saveToDownloads(fileUri, fileName),
            style: 'default'
          }
        ],
        { cancelable: true, onDismiss: () => this.cleanup(fileUri) }
      );
      return;
    }
    
    // Android: Multiple options
    const shareButtons = [
      {
        text: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏õ‡∏ó‡∏µ‡πà Downloads',
        onPress: () => this.saveToDownloads(fileUri, fileName)
      },
      {
        text: '‡πÅ‡∏ä‡∏£‡πå‡πÑ‡∏õ‡πÅ‡∏≠‡∏õ‡∏≠‡∏∑‡πà‡∏ô',
        onPress: () => this.shareToApp(fileUri, fileName)
      },
      {
        text: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
        style: 'cancel',
        onPress: () => this.cleanup(fileUri)
      }
    ];
    
    // Add Android-specific option
    if (isAndroid) {
      shareButtons.unshift({
        text: '‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡πâ‡∏ß‡∏¢‡πÅ‡∏≠‡∏õ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå',
        onPress: () => this.openWithFileManager(fileUri, fileName)
      });
    }
    
    Alert.alert(
      '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
      `‡πÑ‡∏ü‡∏•‡πå: ${fileName}`,
      shareButtons,
      { cancelable: true, onDismiss: () => this.cleanup(fileUri) }
    );
  }
  
  /**
   * Save to Downloads using PublicAndroidDownloads
   */
  static async saveToDownloads(fileUri, fileName) {
    try {
      console.log('üìÅ Saving to Downloads...');
      
      if (Platform.OS === 'android') {
        const result = await PublicAndroidDownloads.saveToPublicDownloads(fileUri, fileName);
        
        if (result.success) {
          Alert.alert('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', result.message);
        } else {
          // If public downloads fails, try sharing as fallback
          Alert.alert(
            '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ',
            `${result.message}\n\n‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå‡πÅ‡∏ó‡∏ô`,
            [
              { text: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å' },
              { text: '‡πÅ‡∏ä‡∏£‡πå', onPress: () => this.shareToApp(fileUri, fileName) }
            ]
          );
        }
      } else {
        // iOS: Use PublicAndroidDownloads (which handles iOS sharing)
        const result = await PublicAndroidDownloads.saveToPublicDownloads(fileUri, fileName);
        
        if (result.success) {
          Alert.alert('‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å', result.message);
        } else {
          Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: ${result.error}`);
        }
      }
      
    } catch (error) {
      console.error('‚ùå Save to Downloads error:', error);
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ: ${error.message}`);
    } finally {
      // Cleanup after delay
      setTimeout(() => this.cleanup(fileUri), 5000);
    }
  }
  
  /**
   * Share to other apps
   */
  static async shareToApp(fileUri, fileName) {
    try {
      console.log('üì§ Sharing to apps...');
      
      if (!await Sharing.isAvailableAsync()) {
        throw new Error('‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
      }
      
      await Sharing.shareAsync(fileUri, {
        mimeType: this.getMimeType(fileName),
        dialogTitle: `‡πÅ‡∏ä‡∏£‡πå‡πÑ‡∏ü‡∏•‡πå: ${fileName}`,
      });
      
      console.log('‚úÖ File shared successfully');
      
      // Show tip for saving to Downloads
      setTimeout(() => {
        Alert.alert(
          '‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö',
          '‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏õ‡∏ó‡∏µ‡πà Downloads:\n‚Ä¢ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "Files" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå"\n‚Ä¢ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Downloads\n‚Ä¢ ‡πÅ‡∏ï‡∏∞ "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"',
          [{ text: '‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß' }]
        );
      }, 1000);
      
    } catch (error) {
      console.error('‚ùå Share error:', error);
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ä‡∏£‡πå‡πÑ‡∏î‡πâ: ${error.message}`);
    } finally {
      // Cleanup after delay
      setTimeout(() => this.cleanup(fileUri), 10000);
    }
  }
  
  /**
   * Open with file manager (Android)
   */
  static async openWithFileManager(fileUri, fileName) {
    try {
      console.log('üì± Opening with file manager...');
      
      // Try sharing with specific intent for file managers
      await Sharing.shareAsync(fileUri, {
        mimeType: this.getMimeType(fileName),
        dialogTitle: `‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡πâ‡∏ß‡∏¢: ${fileName}`,
      });
      
      // Show instruction
      Alert.alert(
        '‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö',
        '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏≠‡∏õ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå ‡πÄ‡∏ä‡πà‡∏ô:\n‚Ä¢ Files by Google\n‚Ä¢ My Files (Samsung)\n‚Ä¢ File Manager\n\n‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á Downloads ‡πÑ‡∏î‡πâ',
        [{ text: '‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß' }]
      );
      
    } catch (error) {
      console.error('‚ùå File manager error:', error);
      // Fallback to regular sharing
      this.shareToApp(fileUri, fileName);
    }
  }
  
  /**
   * Clean up temporary files
   */
  static async cleanup(fileUri) {
    try {
      if (fileUri && fileUri.includes('temp_')) {
        await FileSystem.deleteAsync(fileUri, { idempotent: true });
        console.log('üóëÔ∏è Temporary file cleaned up');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Cleanup warning:', error.message);
    }
  }
  
  /**
   * Get MIME type for file
   */
  static getMimeType(fileName) {
    const ext = fileName.toLowerCase().substr(fileName.lastIndexOf('.'));
    const mimeTypes = {
      '.pdf': 'application/pdf',
      '.doc': 'application/msword',
      '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
      '.xls': 'application/vnd.ms-excel',
      '.xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
      '.jpg': 'image/jpeg',
      '.jpeg': 'image/jpeg',
      '.png': 'image/png',
      '.gif': 'image/gif',
      '.txt': 'text/plain',
      '.zip': 'application/zip',
    };
    return mimeTypes[ext] || 'application/octet-stream';
  }
}

export default FileShareHelper;