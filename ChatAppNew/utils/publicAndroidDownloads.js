import * as FileSystem from 'expo-file-system/legacy';
import * as MediaLibrary from 'expo-media-library';
import * as Sharing from 'expo-sharing';
import { Platform, Alert } from 'react-native';

/**
 * Enhanced Android Downloads utility - focuses on user-accessible locations
 */
export class PublicAndroidDownloads {
  
  /**
   * Main function to save file to user-accessible Downloads
   */
  static async saveToPublicDownloads(sourceUri, fileName) {
    // Handle iOS differently - use sharing directly
    if (Platform.OS === 'ios') {
      console.log('üçé iOS detected, using sharing method for Downloads');
      return await this.saveViaSharing(sourceUri, fileName);
    }
    
    if (Platform.OS !== 'android') {
      return { success: false, error: 'Platform not supported' };
    }

    console.log('üìÅ Attempting to save to PUBLIC Downloads folder:', fileName);
    
    try {
      // Method 1: Try MediaLibrary for media files (images/videos)
      if (this.isMediaFile(fileName)) {
        console.log('üñºÔ∏è Detected media file, trying MediaLibrary...');
        const mediaResult = await this.saveMediaFile(sourceUri, fileName);
        if (mediaResult.success) {
          return mediaResult;
        }
      }
      
      // Method 2: Try direct save to public Downloads using Sharing + file manager
      console.log('üì± Using Sharing + file manager approach...');
      const shareResult = await this.saveViaSharing(sourceUri, fileName);
      if (shareResult.success) {
        return shareResult;
      }
      
      // Method 3: Use intent to let user choose location
      console.log('üéØ Using intent launcher for user selection...');
      const intentResult = await this.saveViaIntent(sourceUri, fileName);
      if (intentResult.success) {
        return intentResult;
      }
      
      // Method 4: Fallback with clear instructions
      return {
        success: false,
        error: 'All public download methods failed',
        message: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏õ‡∏ó‡∏µ‡πà Downloads ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á\n\n‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô app storage\n\n‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå:\n1. ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå\n2. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Internal Storage ‚Üí Android ‚Üí data ‚Üí com.kanoop60.chatappnew ‚Üí files\n3. ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå Share ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡πÅ‡∏≠‡∏õ‡∏≠‡∏∑‡πà‡∏ô`
      };
      
    } catch (error) {
      console.error('‚ùå Public Downloads error:', error);
      return { 
        success: false, 
        error: error.message,
        message: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`
      };
    }
  }
  
  /**
   * Check if file is a media file
   */
  static isMediaFile(fileName) {
    const mediaExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.mp4', '.mov', '.avi', '.mkv', '.mp3', '.wav', '.m4a'];
    const ext = fileName.toLowerCase().substr(fileName.lastIndexOf('.'));
    return mediaExtensions.includes(ext);
  }
  
  /**
   * Save media files using MediaLibrary (saves to Gallery/Photos - accessible to users)
   */
  static async saveMediaFile(sourceUri, fileName) {
    try {
      // Skip MediaLibrary for now due to permission issues
      console.log('‚ö†Ô∏è MediaLibrary temporarily disabled due to permission conflicts');
      return { success: false, error: 'MediaLibrary disabled' };
      
      /* Original MediaLibrary code - commented out due to AUDIO permission issues
      const { status } = await MediaLibrary.requestPermissionsAsync();
      if (status !== 'granted') {
        return { success: false, error: 'MediaLibrary permission denied' };
      }
      
      const asset = await MediaLibrary.createAssetAsync(sourceUri);
      
      return {
        success: true,
        uri: asset.uri,
        message: `‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏õ‡∏ó‡∏µ‡πà Gallery ‡πÅ‡∏•‡πâ‡∏ß\n\n‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå: ${fileName}\n\n‡∏î‡∏π‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡πÅ‡∏≠‡∏õ Photos ‡∏´‡∏£‡∏∑‡∏≠ Gallery`
      };
      */
    } catch (error) {
      console.log('‚ùå MediaLibrary failed:', error.message);
      return { success: false, error: error.message };
    }
  }
  
  /**
   * Save using Sharing API to let user choose destination
   */
  static async saveViaSharing(sourceUri, fileName) {
    try {
      if (!await Sharing.isAvailableAsync()) {
        return { success: false, error: 'Sharing not available' };
      }
      
      // Copy to a temp location with proper name
      const tempDir = `${FileSystem.documentDirectory}temp_downloads/`;
      await FileSystem.makeDirectoryAsync(tempDir, { intermediates: true });
      
      const tempUri = `${tempDir}${fileName}`;
      await FileSystem.copyAsync({
        from: sourceUri,
        to: tempUri
      });
      
      // Share the file - this allows user to save it anywhere they want
      await Sharing.shareAsync(tempUri, {
        mimeType: this.getMimeType(fileName),
        dialogTitle: `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå: ${fileName}`,
        UTI: this.getUTI(fileName)
      });
      
      // Cleanup after a delay
      setTimeout(async () => {
        try {
          await FileSystem.deleteAsync(tempDir, { idempotent: true });
        } catch (cleanupError) {
          console.log('‚ö†Ô∏è Cleanup warning:', cleanupError.message);
        }
      }, 10000); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤ cleanup ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö iOS
      
      return {
        success: true,
        uri: tempUri,
        message: `‚úÖ ‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å!\n\n‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå: ${fileName}\n\nüì± iOS: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "Save to Files" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏õ‡∏ó‡∏µ‡πà:\n‚Ä¢ Downloads\n‚Ä¢ iCloud Drive\n‚Ä¢ ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£`
      };
      
    } catch (error) {
      console.log('‚ùå Sharing failed:', error.message);
      return { success: false, error: error.message };
    }
  }
  
  /**
   * Use Intent Launcher to open file manager
   */
  static async saveViaIntent(sourceUri, fileName) {
    try {
      // Copy to Downloads-like directory first
      const publicDir = `${FileSystem.documentDirectory}Downloads/`;
      await FileSystem.makeDirectoryAsync(publicDir, { intermediates: true });
      
      const targetUri = `${publicDir}${fileName}`;
      await FileSystem.copyAsync({
        from: sourceUri,
        to: targetUri
      });
      
      // File saved successfully - no intent launcher needed
      console.log('‚úÖ File saved to app Downloads folder');
      
      return {
        success: true,
        uri: targetUri,
        message: `‡πÑ‡∏ü‡∏•‡πå‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!\n\n‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå: ${fileName}\n\n‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ ‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡πâ‡∏ß‡∏¢‡πÅ‡∏≠‡∏õ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå\n\n‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô:\n1. ‡πÅ‡∏ï‡∏∞‡∏õ‡∏∏‡πà‡∏° Share ‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå\n2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "Save to Files" ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏≠‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£`
      };
      
    } catch (error) {
      console.log('‚ùå Intent method failed:', error.message);
      return { success: false, error: error.message };
    }
  }
  
  /**
   * Get MIME type for file
   */
  static getMimeType(fileName) {
    const ext = fileName.toLowerCase().substr(fileName.lastIndexOf('.'));
    const mimeTypes = {
      '.pdf': 'application/pdf',
      '.doc': 'application/msword',
      '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
      '.xls': 'application/vnd.ms-excel',
      '.xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
      '.ppt': 'application/vnd.ms-powerpoint',
      '.pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
      '.jpg': 'image/jpeg',
      '.jpeg': 'image/jpeg',
      '.png': 'image/png',
      '.gif': 'image/gif',
      '.mp4': 'video/mp4',
      '.mp3': 'audio/mpeg',
      '.txt': 'text/plain',
      '.zip': 'application/zip',
    };
    return mimeTypes[ext] || 'application/octet-stream';
  }
  
  /**
   * Get UTI for iOS compatibility
   */
  static getUTI(fileName) {
    const ext = fileName.toLowerCase().substr(fileName.lastIndexOf('.'));
    const utiTypes = {
      '.pdf': 'com.adobe.pdf',
      '.doc': 'com.microsoft.word.doc',
      '.docx': 'org.openxmlformats.wordprocessingml.document',
      '.jpg': 'public.jpeg',
      '.jpeg': 'public.jpeg',
      '.png': 'public.png',
      '.txt': 'public.plain-text',
    };
    return utiTypes[ext] || 'public.data';
  }
  
  /**
   * Helper: Clean filename for Android filesystem
   */
  static cleanFileName(fileName) {
    return fileName.replace(/[<>:"/\\|?*]/g, '_');
  }
  
  /**
   * Generate unique filename to avoid conflicts
   */
  static generateUniqueFileName(originalFileName) {
    const timestamp = Date.now();
    const extension = originalFileName.substr(originalFileName.lastIndexOf('.'));
    const nameWithoutExt = originalFileName.substr(0, originalFileName.lastIndexOf('.'));
    return `${nameWithoutExt}_${timestamp}${extension}`;
  }
}

export default PublicAndroidDownloads;