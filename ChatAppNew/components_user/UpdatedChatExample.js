// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ChatHeader ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô PrivateChatScreen.js

import React, { useState, useEffect } from 'react';
import { View, FlatList, StyleSheet, Alert } from 'react-native';
import { ChatHeader, MessageBubble, MessageInput } from '../components_user';

const PrivateChatScreen = ({ route, navigation }) => {
  const [selectionMode, setSelectionMode] = useState(false);
  const [selectedMessages, setSelectedMessages] = useState([]);
  // ... other states

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π
  const handleManageChat = () => {
    console.log('üîÑ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó');
    setSelectionMode(true);
    setSelectedMessages([]);
  };

  const handleClearChat = () => {
    Alert.alert(
      '‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏ä‡∏ó',
      '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
      [
        {
          text: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
          style: 'cancel',
        },
        {
          text: '‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
          style: 'destructive',
          onPress: () => {
            console.log('üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏ä‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');
            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            // clearAllMessages();
          },
        },
      ]
    );
  };

  const handleBlockUser = () => {
    Alert.alert(
      '‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
      `‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏•‡πá‡∏≠‡∏Å ${route.params?.recipientName} ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`,
      [
        {
          text: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
          style: 'cancel',
        },
        {
          text: '‡∏ö‡∏•‡πá‡∏≠‡∏Å',
          style: 'destructive',
          onPress: () => {
            console.log('üö´ ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            // blockUser(route.params?.recipientId);
          },
        },
      ]
    );
  };

  const handleCancelSelection = () => {
    console.log('‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°');
    setSelectionMode(false);
    setSelectedMessages([]);
  };

  const handleDeleteSelected = () => {
    if (selectedMessages.length === 0) return;

    Alert.alert(
      '‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°',
      `‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ${selectedMessages.length} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`,
      [
        {
          text: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
          style: 'cancel',
        },
        {
          text: '‡∏•‡∏ö',
          style: 'destructive',
          onPress: () => {
            console.log('üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:', selectedMessages);
            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            // deleteSelectedMessages(selectedMessages);
            setSelectionMode(false);
            setSelectedMessages([]);
          },
        },
      ]
    );
  };

  return (
    <View style={styles.container}>
      {/* Header ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏π dropdown */}
      <ChatHeader
        recipientName={route.params?.recipientName}
        recipientAvatar={route.params?.recipientAvatar}
        roomName={route.params?.roomName}
        selectionMode={selectionMode}
        selectedMessages={selectedMessages}
        onBackPress={() => navigation.goBack()}
        onCancelSelection={handleCancelSelection}
        onDeleteSelected={handleDeleteSelected}
        onManageChat={handleManageChat}
        onClearChat={handleClearChat}
        onBlockUser={handleBlockUser}
      />

      {/* Message List */}
      <FlatList
        data={messages}
        keyExtractor={(item) => item._id}
        renderItem={({ item }) => (
          <MessageBubble
            item={item}
            currentUser={currentUser}
            recipientName={route.params?.recipientName}
            recipientAvatar={route.params?.recipientAvatar}
            selectionMode={selectionMode}
            selectedMessages={selectedMessages}
            showTimeForMessages={showTimeForMessages}
            onMessagePress={handleMessagePress}
            onLongPress={() => {/* ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏Ñ‡πâ‡∏≤‡∏á */}}
            formatDateTime={formatDateTime}
          />
        )}
      />

      {/* Message Input */}
      <MessageInput
        newMessage={newMessage}
        setNewMessage={setNewMessage}
        isSending={isSending}
        selectedFile={selectedFile}
        selectedImage={selectedImage}
        onSendMessage={handleSendMessage}
        onPickFile={(file) => setSelectedFile(file)}
        onPickImage={(image) => setSelectedImage(image)}
        onRemoveFile={() => setSelectedFile(null)}
        onRemoveImage={() => setSelectedImage(null)}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
});

export default PrivateChatScreen;