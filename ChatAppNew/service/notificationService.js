// Enhanced notification service with expo-notifications for proper push notification support
import { Alert, Platform } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import * as Notifications from 'expo-notifications';
import * as Device from 'expo-device';
import Constants from 'expo-constants';

// Set notification handling behavior
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: true,
  }),
});

class NotificationService {
  currentUserId = null;
  currentUserName = null;
  expoPushToken = null;
  notificationListener = null;
  responseListener = null;

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  setCurrentUser(user) {
    this.currentUserId = user?._id || null;
    this.currentUserName = user ? `${user.firstName} ${user.lastName}` : null;
    console.log('üîî NotificationService: Updated current user:', this.currentUserName, this.currentUserId);
  }

  // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ logout
  async clearCurrentUser() {
    console.log('üîî NotificationService: Clearing current user data');
    
    // ‡∏•‡∏ö push token ‡∏à‡∏≤‡∏Å backend ‡∏Å‡πà‡∏≠‡∏ô logout
    if (this.currentUserId && this.expoPushToken) {
      try {
        console.log('üóëÔ∏è Removing push token from backend...');
        await this.updatePushToken(null); // ‡∏™‡πà‡∏á null ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö token
        console.log('‚úÖ Push token removed from backend');
      } catch (error) {
        console.error('‚ùå Failed to remove push token from backend:', error);
      }
    }
    
    // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô service
    this.currentUserId = null;
    this.currentUserName = null;
    this.expoPushToken = null;
    console.log('‚úÖ NotificationService: All user data cleared');
  }

  // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö push notifications
  async registerForPushNotificationsAsync() {
    let token;

    if (Platform.OS === 'android') {
      await Notifications.setNotificationChannelAsync('default', {
        name: 'default',
        importance: Notifications.AndroidImportance.MAX,
        vibrationPattern: [0, 250, 250, 250],
        lightColor: '#FF231F7C',
      });
    }

    if (Device.isDevice) {
      const { status: existingStatus } = await Notifications.getPermissionsAsync();
      let finalStatus = existingStatus;
      
      if (existingStatus !== 'granted') {
        const { status } = await Notifications.requestPermissionsAsync();
        finalStatus = status;
      }
      
      if (finalStatus !== 'granted') {
        console.log('üîî Failed to get push token for push notification!');
        Alert.alert(
          '‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', 
          '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤'
        );
        return null;
      }
      
      try {
        const projectId = Constants?.expoConfig?.extra?.eas?.projectId ?? Constants?.easConfig?.projectId;
        if (!projectId) {
          console.log('üîî No Expo project ID found');
        }
        
        token = (await Notifications.getExpoPushTokenAsync({ 
          projectId: projectId 
        })).data;
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô token collision
        const deviceInfo = {
          token: token,
          platform: Platform.OS,
          deviceId: Device.osInternalBuildId || Device.osBuildId || 'unknown',
          deviceName: Device.deviceName || 'unknown',
          timestamp: Date.now()
        };
        
        console.log('üîî Expo push token:', token);
        console.log('üì± Device info:', {
          platform: deviceInfo.platform,
          deviceId: deviceInfo.deviceId,
          deviceName: deviceInfo.deviceName
        });
        
        this.expoPushToken = token;
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å token ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ô AsyncStorage
        await AsyncStorage.setItem('expo_push_token', token);
        await AsyncStorage.setItem('device_info', JSON.stringify(deviceInfo));
        
      } catch (error) {
        console.error('üîî Error getting expo push token:', error);
        // Fallback: ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏≠‡∏õ‡πÑ‡∏î‡πâ‡πÅ‡∏°‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ push token
        return null;
      }
    } else {
      console.log('üîî Must use physical device for Push Notifications');
    }

    return token;
  }

  // ‡∏î‡∏∂‡∏á push token ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
  async getStoredPushToken() {
    try {
      const token = await AsyncStorage.getItem('expo_push_token');
      if (token) {
        this.expoPushToken = token;
      }
      return token;
    } catch (error) {
      console.error('üîî Error getting stored push token:', error);
      return null;
    }
  }

  // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ
  showInAppNotification(title, body, data = {}) {
    // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
    const senderIdString = data.senderId?.toString();
    const currentUserIdString = this.currentUserId?.toString();
    
    if (senderIdString === currentUserIdString) {
      console.log('üîî Skipping notification for own message');
      return;
    }

    console.log('üîî Showing in-app notification:', { title, body, data });
    console.log('üîî Sender ID:', senderIdString, 'Current User ID:', currentUserIdString);
    
    // ‡πÉ‡∏ä‡πâ setTimeout ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ Alert ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏°‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ä‡∏ó
    setTimeout(() => {
      try {
        // ‡πÅ‡∏™‡∏î‡∏á Alert popup ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        Alert.alert(
          title || '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà',
          body || '‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà',
          [
            {
              text: '‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°',
              style: 'default',
              onPress: () => {
                // TODO: Navigate to chat if needed
                console.log('üîî User pressed "‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"');
              }
            },
            {
              text: '‡∏ï‡∏Å‡∏•‡∏á',
              style: 'cancel'
            }
          ],
          { 
            cancelable: true,
            onDismiss: () => {
              console.log('üîî Notification dismissed');
            }
          }
        );
        console.log('üîî Alert displayed successfully');
      } catch (error) {
        console.error('üîî Error showing alert:', error);
      }
    }, 100); // ‡πÄ‡∏û‡∏¥‡πà‡∏° delay ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
  }

  // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô Expo Push Notification
  async schedulePushNotification(title, body, data = {}, trigger = null) {
    try {
      const notificationId = await Notifications.scheduleNotificationAsync({
        content: {
          title,
          body,
          data,
          sound: 'default',
        },
        trigger: trigger || { seconds: 1 }, // ‡∏™‡πà‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      });
      
      console.log('üîî Local notification scheduled:', notificationId);
      return notificationId;
    } catch (error) {
      console.error('üîî Error scheduling notification:', error);
      return null;
    }
  }

  // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
  async sendMessageNotification({ recipientId, senderName, message, chatroomId }) {
    try {
      console.log('üîî Sending notification:', { recipientId, senderName, message, chatroomId });
      
      // ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î development ‡πÉ‡∏ä‡πâ in-app notification
      this.showInAppNotification(
        `‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å ${senderName}`,
        message,
        { 
          senderId: this.currentUserId,
          recipientId,
          chatroomId 
        }
      );

      return { success: true, method: 'in-app' };
    } catch (error) {
      console.error('üîî Error sending notification:', error);
      return { success: false, error: error.message };
    }
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Socket (Global notification)
  async handleNewMessage(messageContent, senderName, chatroomId, senderId) {
    try {
      console.log('üîî GlobalNotification: Handling new message from:', senderName);
      console.log('üîî GlobalNotification: Message:', messageContent);
      console.log('üîî GlobalNotification: Chatroom:', chatroomId);
      console.log('üîî GlobalNotification: Sender ID:', senderId);
      console.log('üîî GlobalNotification: Current User ID:', this.currentUserId);

      // ‡πÑ‡∏°‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
      const senderIdString = senderId?.toString();
      const currentUserIdString = this.currentUserId?.toString();
      
      if (senderIdString === currentUserIdString) {
        console.log('üîî GlobalNotification: Skipping own message');
        return;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      const settings = await this.getNotificationSettings();
      if (!settings.enabled) {
        console.log('üîî GlobalNotification: Notifications disabled');
        return;
      }

      // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö global
      console.log('üîî GlobalNotification: Showing notification');
      this.showInAppNotification(
        `‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å ${senderName}`,
        messageContent,
        {
          senderId: senderId,
          chatroomId: chatroomId,
          senderName: senderName
        }
      );
      
    } catch (error) {
      console.error('üîî GlobalNotification: Error handling new message:', error);
    }
  }

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (Mock function)
  async updateNotificationSettings(settings) {
    try {
      await AsyncStorage.setItem('notification_settings', JSON.stringify(settings));
      console.log('üîî Notification settings updated:', settings);
      return true;
    } catch (error) {
      console.error('üîî Error updating notification settings:', error);
      return false;
    }
  }

  // ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  async getNotificationSettings() {
    try {
      const settings = await AsyncStorage.getItem('notification_settings');
      return settings ? JSON.parse(settings) : {
        enabled: true,
        sound: true,
        vibration: true,
        showPreview: true
      };
    } catch (error) {
      console.error('üîî Error getting notification settings:', error);
      return {
        enabled: true,
        sound: true,
        vibration: true,
        showPreview: true
      };
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  async checkPermissions() {
    try {
      const settings = await Notifications.getPermissionsAsync();
      return {
        status: settings.status,
        canAskAgain: settings.canAskAgain,
        granted: settings.granted
      };
    } catch (error) {
      console.error('üîî Error checking permissions:', error);
      return {
        status: 'undetermined',
        canAskAgain: true,
        granted: false
      };
    }
  }

  // ‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  async requestPermissions() {
    try {
      const settings = await Notifications.requestPermissionsAsync({
        ios: {
          allowAlert: true,
          allowBadge: true,
          allowSound: true,
          allowAnnouncements: false,
        },
      });
      return {
        status: settings.status,
        canAskAgain: settings.canAskAgain,
        granted: settings.granted
      };
    } catch (error) {
      console.error('üîî Error requesting permissions:', error);
      return {
        status: 'denied',
        canAskAgain: false,
        granted: false
      };
    }
  }

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö notifications
  addNotificationReceivedListener(listener) {
    this.notificationListener = Notifications.addNotificationReceivedListener(listener);
    return this.notificationListener;
  }

  addNotificationResponseReceivedListener(listener) {
    this.responseListener = Notifications.addNotificationResponseReceivedListener(listener);
    return this.responseListener;
  }

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï push token ‡πÉ‡∏ô backend
  async updatePushToken(token) {
    try {
      if (!this.currentUserId) {
        console.log('üîî No current user - skipping token update');
        return;
      }

      console.log('üîî Updating push token in backend:', token ? 'SET' : 'REMOVE');
      
      // Import api here to avoid circular dependency
      const { default: api } = await import('./api');
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏≤‡∏™‡πà‡∏á‡∏î‡πâ‡∏ß‡∏¢
      let deviceInfo = {};
      try {
        const deviceInfoStr = await AsyncStorage.getItem('device_info');
        if (deviceInfoStr) {
          deviceInfo = JSON.parse(deviceInfoStr);
        }
      } catch (err) {
        console.log('‚ö†Ô∏è Could not load device info:', err);
      }

      const response = await api.post('/users/push-token', {
        pushToken: token,
        deviceInfo: {
          platform: deviceInfo.platform || Platform.OS,
          deviceId: deviceInfo.deviceId || 'unknown',
          deviceName: deviceInfo.deviceName || 'unknown'
        }
      });
      
      console.log('‚úÖ Push token updated successfully:', response.data);
    } catch (error) {
      console.error('‚ùå Error updating push token:', error);
      throw error; // Re-throw ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ caller ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
    }
  }

  // ‡∏•‡πâ‡∏≤‡∏á badge count
  async clearBadgeCount() {
    try {
      await Notifications.setBadgeCountAsync(0);
      console.log('üîî Badge count cleared');
    } catch (error) {
      console.error('üîî Error clearing badge count:', error);
    }
  }

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ badge count
  async setBadgeCount(count) {
    try {
      await Notifications.setBadgeCountAsync(count);
      console.log('üîî Badge count set to:', count);
    } catch (error) {
      console.error('üîî Error setting badge count:', error);
    }
  }

  // ‡∏•‡∏ö listeners ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  removeListeners() {
    if (this.notificationListener) {
      Notifications.removeNotificationSubscription(this.notificationListener);
      this.notificationListener = null;
    }
    if (this.responseListener) {
      Notifications.removeNotificationSubscription(this.responseListener);
      this.responseListener = null;
    }
  }
}

export default new NotificationService();
