// Keep-alive service ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Render.com cold start
import { API_URL } from './api';

class KeepAliveService {
  constructor() {
    this.intervalId = null;
    this.isRunning = false;
  }

  // ‡πÄ‡∏£‡∏¥‡πà‡∏° keep-alive ping ‡∏ó‡∏∏‡∏Å 10 ‡∏ô‡∏≤‡∏ó‡∏µ
  start() {
    if (this.isRunning) return;
    
    console.log('üîÑ Starting keep-alive service for Render.com');
    this.isRunning = true;
    
    // Ping ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°
    this.ping();
    
    // ‡∏ï‡∏±‡πâ‡∏á interval ping ‡∏ó‡∏∏‡∏Å 10 ‡∏ô‡∏≤‡∏ó‡∏µ (600,000ms)
    this.intervalId = setInterval(() => {
      this.ping();
    }, 600000);
  }

  // ‡∏´‡∏¢‡∏∏‡∏î keep-alive
  stop() {
    if (!this.isRunning) return;
    
    console.log('‚èπÔ∏è Stopping keep-alive service');
    this.isRunning = false;
    
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
    }
  }

  // ‡∏™‡πà‡∏á ping request
  async ping() {
    try {
      console.log('üèì Pinging server to prevent cold start...');
      
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 15000);

      const response = await fetch(`${API_URL}`, {
        method: 'HEAD', // ‡πÉ‡∏ä‡πâ HEAD ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        signal: controller.signal,
        headers: {
          'User-Agent': 'KeepAlive-Service'
        }
      });

      clearTimeout(timeoutId);
      
      if (response.ok || response.status === 404) {
        console.log('‚úÖ Keep-alive ping successful');
      } else {
        console.log('‚ö†Ô∏è Keep-alive ping: unusual status', response.status);
      }
    } catch (error) {
      if (error.name === 'AbortError') {
        console.log('‚è∞ Keep-alive ping timeout (server might be cold starting)');
      } else {
        console.log('‚ùå Keep-alive ping failed:', error.message);
      }
    }
  }

  // Status
  getStatus() {
    return {
      isRunning: this.isRunning,
      intervalId: this.intervalId
    };
  }
}

// Export singleton instance
const keepAliveService = new KeepAliveService();
export default keepAliveService;
