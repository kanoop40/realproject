import { API_URL } from './api';

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö wake up server
export const wakeUpServer = async () => {
  try {
    console.log('üè• Health check: Waking up server...');
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 60000); // 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

    const response = await fetch(`${API_URL}`, {
      method: 'GET',
      signal: controller.signal,
      headers: {
        'Content-Type': 'application/json'
      }
    });

    clearTimeout(timeoutId);
    
    if (response.ok || response.status === 404) {
      console.log('‚úÖ Health check: Server is awake!');
      return true;
    } else {
      console.log('‚ö†Ô∏è Health check: Server responding but not ready');
      return false;
    }
  } catch (error) {
    if (error.name === 'AbortError') {
      console.log('‚è∞ Health check: Timeout - server is probably cold starting');
    } else {
      console.log('‚ùå Health check failed:', error.message);
    }
    return false;
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö check server status
export const checkServerStatus = async () => {
  try {
    console.log('üîç Checking server status...');
    const response = await fetch(`${API_URL}/api/users/current`, {
      method: 'HEAD', // ‡πÉ‡∏ä‡πâ HEAD ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      timeout: 10000
    });
    
    console.log('‚úÖ Server status: Ready');
    return true;
  } catch (error) {
    console.log('‚ùå Server status: Not ready');
    return false;
  }
};
