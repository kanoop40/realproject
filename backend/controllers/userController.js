const asyncHandler = require('express-async-handler');
const User = require('../models/UserModel');
const generateToken = require('../utils/generateToken');
const fs = require('fs').promises;
const path = require('path');
const { deleteOldAvatar } = require('../config/cloudinary');

const searchUsers = asyncHandler(async (req, res) => {
    try {
        const q = req.query.q ? req.query.q.trim() : '';
        const currentUserId = req.user._id;
        const currentUserRole = req.user.role; // ‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å auth middleware
        console.log('Search query:', q);
        console.log('Current user role:', currentUserRole);

        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏™‡πà‡∏áarray ‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
        if (!q) {
            console.log('Empty search query, returning empty array');
            return res.json([]);
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á regex ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö case-insensitive
        const searchRegex = new RegExp(q, 'i');
        console.log('Search regex:', searchRegex);

        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î role filter ‡∏ï‡∏≤‡∏° role ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        let roleFilter = {};
        if (currentUserRole === 'student') {
            // ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏à‡∏≠‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô admin
            roleFilter = { role: { $ne: 'admin' } };
        } else if (currentUserRole === 'teacher') {
            // teacher ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å role ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô admin
            roleFilter = { role: { $ne: 'admin' } };
        } else if (currentUserRole === 'admin') {
            // admin ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å role
            roleFilter = {};
        }

        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏£‡∏≠‡∏á role
        const query = {
            $and: [
                roleFilter, // ‡∏Å‡∏£‡∏≠‡∏á role
                { _id: { $ne: currentUserId } }, // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
                {
                    $or: [
                        { firstName: searchRegex },
                        { lastName: searchRegex },
                        { 
                            $expr: {
                                $regexMatch: {
                                    input: { $concat: ['$firstName', ' ', '$lastName'] },
                                    regex: q,
                                    options: 'i'
                                }
                            }
                        }
                    ]
                }
            ]
        };

        console.log('MongoDB query:', JSON.stringify(query, null, 2)); // Debug log

        const users = await User.find(query)
            .select('-password')
            .sort({ firstName: 1, lastName: 1 }); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠

        console.log(`Found ${users.length} users`); // Debug log

        // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
        res.json(users.map(user => ({
            _id: user._id,
            username: user.username,
            firstName: user.firstName,
            lastName: user.lastName,
            email: user.email,
            faculty: user.faculty,
            major: user.major,
            groupCode: user.groupCode,
            role: user.role,
            avatar: user.avatar
        })));

    } catch (error) {
        console.error('Search error:', error); // Debug log
        res.status(500).json({
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤',
            error: error.message
        });
    }
});

const getUsers = asyncHandler(async (req, res) => {
  const users = await User.find({}).select('-password');
  res.json(users);
});
const deleteUser = asyncHandler(async (req, res) => {
    const user = await User.findById(req.params.id);
    
    if (!user) {
        res.status(404);
        throw new Error('User not found');
    }

    console.log(`üóëÔ∏è Starting cascade deletion for user: ${user.firstName} ${user.lastName} (${user._id})`);

    try {
        // Import required models
        const Messages = require('../models/MessagesModel');
        const GroupChat = require('../models/GroupChatModel');
        const Chatrooms = require('../models/ChatroomsModel');
        const File = require('../models/FileModel');
        const Notification = require('../models/NotificationModel');

        // 1. ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà user ‡∏ô‡∏±‡πâ‡∏ô‡∏™‡πà‡∏á
        console.log('üóëÔ∏è Deleting all messages sent by user...');
        const deletedMessages = await Messages.deleteMany({ user_id: user._id });
        console.log(`‚úÖ Deleted ${deletedMessages.deletedCount} messages`);

        // 2. ‡∏•‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà user ‡∏ô‡∏±‡πâ‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á (creator)
        console.log('üóëÔ∏è Deleting groups created by user...');
        const groupsToDelete = await GroupChat.find({ creator: user._id });
        console.log(`üìä Found ${groupsToDelete.length} groups to delete`);
        
        for (const group of groupsToDelete) {
            console.log(`üóëÔ∏è Deleting group: ${group.groupName} (${group._id})`);
            
            // ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if (group.groupImage) {
                try {
                    const groupImagePath = path.join(__dirname, '..', 'uploads', group.groupImage);
                    await fs.unlink(groupImagePath);
                    console.log(`‚úÖ Deleted group image: ${group.groupImage}`);
                } catch (imageError) {
                    console.log(`‚ö†Ô∏è Could not delete group image: ${imageError.message}`);
                }
            }
            
            if (group.groupAvatar) {
                try {
                    const groupAvatarPath = path.join(__dirname, '..', 'uploads', group.groupAvatar);
                    await fs.unlink(groupAvatarPath);
                    console.log(`‚úÖ Deleted group avatar: ${group.groupAvatar}`);
                } catch (avatarError) {
                    console.log(`‚ö†Ô∏è Could not delete group avatar: ${avatarError.message}`);
                }
            }
            
            // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢
            await Messages.deleteMany({ group_id: group._id });
            // ‡∏•‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°
            await GroupChat.deleteOne({ _id: group._id });
        }

        // 3. ‡∏•‡∏ö user ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà creator)
        console.log('üóëÔ∏è Removing user from groups where they are members...');
        const updateResult = await GroupChat.updateMany(
            { 'members.user': user._id },
            { $pull: { members: { user: user._id } } }
        );
        console.log(`‚úÖ Removed user from ${updateResult.modifiedCount} groups`);

        // 4. ‡∏•‡∏ö chatrooms ‡∏ó‡∏µ‡πà user ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á
        console.log('üóëÔ∏è Deleting chatrooms where user is participant...');
        const chatroomsToDelete = await Chatrooms.find({
            $or: [
                { user_id: user._id },
                { participants: user._id },
                { 'members.userId': user._id }
            ]
        });
        console.log(`üìä Found ${chatroomsToDelete.length} chatrooms to process`);
        
        for (const chatroom of chatroomsToDelete) {
            // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏ô‡∏µ‡πâ
            await Messages.deleteMany({ chat_id: chatroom._id });
            // ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó
            await Chatrooms.deleteOne({ _id: chatroom._id });
        }

        // 5. ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà user ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
        console.log('üóëÔ∏è Deleting files uploaded by user...');
        const filesToDelete = await File.find({ uploadedBy: user._id });
        console.log(`üìä Found ${filesToDelete.length} files to delete`);
        
        // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå
        for (const file of filesToDelete) {
            try {
                if (file.file_path) {
                    const fullPath = path.join(__dirname, '..', file.file_path);
                    await fs.unlink(fullPath);
                    console.log(`‚úÖ Deleted file from filesystem: ${file.file_name}`);
                }
            } catch (fileError) {
                console.log(`‚ö†Ô∏è Could not delete file ${file.file_name}: ${fileError.message}`);
            }
        }
        
        // ‡∏•‡∏ö records ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const deletedFiles = await File.deleteMany({ uploadedBy: user._id });
        console.log(`‚úÖ Deleted ${deletedFiles.deletedCount} file records from database`);

        // 5.1 ‡∏•‡∏ö‡∏£‡∏π‡∏õ avatar ‡∏Ç‡∏≠‡∏á user ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if (user.avatar) {
            try {
                const avatarPath = path.join(__dirname, '..', 'uploads', user.avatar);
                await fs.unlink(avatarPath);
                console.log(`‚úÖ Deleted user avatar: ${user.avatar}`);
            } catch (avatarError) {
                console.log(`‚ö†Ô∏è Could not delete user avatar: ${avatarError.message}`);
            }
        }

        // 6. ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö user
        console.log('üóëÔ∏è Deleting notifications related to user...');
        const deletedNotifications = await Notification.deleteMany({
            $or: [
                { userId: user._id },
                { fromUserId: user._id }
            ]
        });
        console.log(`‚úÖ Deleted ${deletedNotifications.deletedCount} notifications`);

        // 7. ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‡∏•‡∏ö user
        console.log('üóëÔ∏è Deleting user account...');
        await user.deleteOne();
        console.log('‚úÖ User account deleted successfully');

        console.log('üéâ Cascade deletion completed successfully');
        res.json({ 
            message: 'User and all related data removed successfully',
            deletedData: {
                messages: deletedMessages.deletedCount,
                groups: groupsToDelete.length,
                groupMemberships: updateResult.modifiedCount,
                chatrooms: chatroomsToDelete.length,
                files: filesToDelete.length,
                fileRecords: deletedFiles.deletedCount,
                notifications: deletedNotifications.deletedCount,
                userAvatar: user.avatar ? 'deleted' : 'none'
            }
        });

    } catch (error) {
        console.error('‚ùå Error during cascade deletion:', error);
        res.status(500);
        throw new Error(`Failed to delete user and related data: ${error.message}`);
    }
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
const cleanupOrphanedData = asyncHandler(async (req, res) => {
    console.log('üßπ Starting system cleanup for orphaned data...');
    
    try {
        const Messages = require('../models/MessagesModel');
        const GroupChat = require('../models/GroupChatModel');
        const Chatrooms = require('../models/ChatroomsModel');
        const File = require('../models/FileModel');
        const User = require('../models/UserModel');

        let cleanupResults = {
            orphanedMessages: 0,
            orphanedFiles: 0,
            emptyGroups: 0,
            emptyChatrooms: 0
        };

        // 1. ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà user_id ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        console.log('üßπ Cleaning orphaned messages...');
        const allUserIds = await User.find({}, { _id: 1 });
        const validUserIds = allUserIds.map(user => user._id);
        
        const orphanedMessages = await Messages.deleteMany({
            user_id: { $nin: validUserIds }
        });
        cleanupResults.orphanedMessages = orphanedMessages.deletedCount;
        console.log(`‚úÖ Cleaned ${orphanedMessages.deletedCount} orphaned messages`);

        // 2. ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà uploadedBy ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
        console.log('üßπ Cleaning orphaned files...');
        const orphanedFiles = await File.deleteMany({
            uploadedBy: { $nin: validUserIds }
        });
        cleanupResults.orphanedFiles = orphanedFiles.deletedCount;
        console.log(`‚úÖ Cleaned ${orphanedFiles.deletedCount} orphaned files`);

        // 3. ‡∏•‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏´‡∏•‡∏∑‡∏≠
        console.log('üßπ Cleaning empty groups...');
        const emptyGroups = await GroupChat.deleteMany({
            $or: [
                { members: { $size: 0 } },
                { members: { $exists: false } }
            ]
        });
        cleanupResults.emptyGroups = emptyGroups.deletedCount;
        console.log(`‚úÖ Cleaned ${emptyGroups.deletedCount} empty groups`);

        // 4. ‡∏•‡∏ö chatrooms ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ participants
        console.log('üßπ Cleaning empty chatrooms...');
        const emptyChatrooms = await Chatrooms.deleteMany({
            $and: [
                { $or: [{ participants: { $size: 0 } }, { participants: { $exists: false } }] },
                { $or: [{ user_id: { $size: 0 } }, { user_id: { $exists: false } }] }
            ]
        });
        cleanupResults.emptyChatrooms = emptyChatrooms.deletedCount;
        console.log(`‚úÖ Cleaned ${emptyChatrooms.deletedCount} empty chatrooms`);

        console.log('üéâ System cleanup completed successfully');
        res.json({
            message: 'System cleanup completed successfully',
            cleanupResults
        });

    } catch (error) {
        console.error('‚ùå Error during system cleanup:', error);
        res.status(500);
        throw new Error(`System cleanup failed: ${error.message}`);
    }
});

const updateUser = asyncHandler(async (req, res) => {
    const user = await User.findById(req.params.id);
    
    if (user) {
        user.username = req.body.username || user.username;
        user.email = req.body.email || user.email;
        user.firstName = req.body.firstName || user.firstName;
        user.lastName = req.body.lastName || user.lastName;
        user.faculty = req.body.faculty || user.faculty;
        user.major = req.body.major || user.major;
        user.groupCode = req.body.groupCode || user.groupCode;
        user.role = req.body.role || user.role;
        
        if (req.body.password) {
            user.password = req.body.password;
        }

        const updatedUser = await user.save();

        res.json({
            _id: updatedUser._id,
            username: updatedUser.username,
            email: updatedUser.email,
            firstName: updatedUser.firstName,
            lastName: updatedUser.lastName,
            faculty: updatedUser.faculty,
            major: updatedUser.major,
            groupCode: updatedUser.groupCode,
            role: updatedUser.role
        });
    } else {
        res.status(404);
        throw new Error('User not found');
    }
});


const authUser = asyncHandler(async (req, res) => {
    const { email, password, username } = req.body;

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const user = await User.findOne({
        $or: [
            { email: email?.toLowerCase() },
            { username: username?.toLowerCase() }
        ]
    });
    
    console.log('Login attempt for:', email || username);
    console.log('Found user:', user);

    if (user && (await user.matchPassword(password))) {
        const token = generateToken(user._id);
        console.log('Generated token:', token); // ‡πÄ‡∏û‡∏¥‡πà‡∏° log
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö verify token ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        try {
            const decoded = jwt.verify(token, process.env.JWT_SECRET);
            console.log('Token verified after generation:', decoded);
        } catch (error) {
            console.error('Token verification failed:', error);
        }

        res.json({
            _id: user._id,
            username: user.username,
            email: user.email,
            firstName: user.firstName,
            lastName: user.lastName,
            role: user.role,
            token
        });
    } else {
        res.status(401);
        throw new Error('Invalid credentials');
    }
});

// @desc    Register a new user
// @route   POST /api/users/register
// @access  Public
const registerUser = asyncHandler(async (req, res) => {
    const { username, email, password, firstName, lastName, faculty, major, groupCode, role } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const userExists = await User.findOne({ 
        $or: [
            { email: email.toLowerCase() }, 
            { username: username.toLowerCase() }
        ] 
    });

    if (userExists) {
        res.status(400);
        throw new Error('User already exists');
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ role ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const validRoles = ['admin', 'teacher', 'student'];
    if (role && !validRoles.includes(role)) {
        res.status(400);
        throw new Error(`Invalid role. Role must be one of: ${validRoles.join(', ')}`);
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
    const user = await User.create({
        username: username.toLowerCase(),
        email: email.toLowerCase(),
        password,
        firstName,
        lastName,
        faculty,
        major,
        groupCode,
        role: role || 'student' // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏ role ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô student
    });

    if (user) {
        console.log('Created user:', {
            id: user._id,
            username: user.username,
            role: user.role,
            createdAt: new Date().toISOString()
        });

        res.status(201).json({
            _id: user._id,
            username: user.username,
            email: user.email,
            firstName: user.firstName,
            lastName: user.lastName,
            role: user.role,
            token: generateToken(user._id)
        });
    } else {
        res.status(400);
        throw new Error('Invalid user data');
    }
});
// @desc    Get user profile
// @route   GET /api/users/profile
// @access  Private
const getUserProfile = asyncHandler(async (req, res) => {
    const user = await User.findById(req.user._id);
    
    if (user) {
        res.json({
            _id: user._id,
            username: user.username,
            email: user.email,
            firstName: user.firstName,
            lastName: user.lastName,
            faculty: user.faculty,
            major: user.major,
            groupCode: user.groupCode,
            role: user.role
        });
    } else {
        res.status(404);
        throw new Error('User not found');
    }
});

// @desc    Update user profile
// @route   PUT /api/users/profile
// @access  Private
const updateUserProfile = asyncHandler(async (req, res) => {
    const user = await User.findById(req.user._id);
    
    if (user) {
        user.username = req.body.username || user.username;
        user.email = req.body.email || user.email;
        user.firstName = req.body.firstName || user.firstName;
        user.lastName = req.body.lastName || user.lastName;
        user.faculty = req.body.faculty || user.faculty;
        user.major = req.body.major || user.major;
        user.groupCode = req.body.groupCode || user.groupCode;
        
        if (req.body.password) {
            user.password = req.body.password;
        }

        const updatedUser = await user.save();

        res.json({
            _id: updatedUser._id,
            username: updatedUser.username,
            email: updatedUser.email,
            firstName: updatedUser.firstName,
            lastName: updatedUser.lastName,
            faculty: updatedUser.faculty,
            major: updatedUser.major,
            groupCode: updatedUser.groupCode,
            role: updatedUser.role,
            token: generateToken(updatedUser._id)
        });
    } else {
        res.status(404);
        throw new Error('User not found');
    }
});

const createUser = asyncHandler(async (req, res) => {
  try {
    let {
      username,
      password,
      firstName,
      lastName,
      email,
      role,
      faculty,
      department,
      major,
      groupCode
    } = req.body;

    console.log('Creating user with data:', { username, email, role, faculty, major, groupCode });

    // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î email - ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô undefined
    if (email === '' || email === null || (typeof email === 'string' && email.trim() === '')) {
      email = undefined;
    } else if (email) {
      email = email.trim();
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ username ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingUser = await User.findOne({ username });
    if (existingUser) {
      res.status(400);
      throw new Error('‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ email ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ email)
    if (email) {
      const existingEmailUser = await User.findOne({ email });
      if (existingEmailUser) {
        res.status(400);
        throw new Error('‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
      }
    }

    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const userData = {
      username,
      password,
      firstName,
      lastName,
      role,
      faculty,
      department,
      major,
      groupCode
    };

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏°‡∏≤ (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á)
    if (email) {
      userData.email = email;
    }

    const user = await User.create(userData);

    if (user) {
      console.log('User created successfully:', user.username);
      res.status(201).json({
        message: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        userId: user._id
      });
    } else {
      res.status(400);
      throw new Error('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }
  } catch (error) {
    console.error('Error in createUser:', error.message);
    if (error.code === 11000) {
      // MongoDB duplicate key error
      const field = Object.keys(error.keyPattern)[0];
      const message = field === 'username' ? '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß' : 
                      field === 'email' ? '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß' : 
                      '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö';
      res.status(400);
      throw new Error(message);
    }
    throw error;
  }
});
const getUserById = asyncHandler(async (req, res) => {
    const user = await User.findById(req.params.id).select('-password');
    
    if (user) {
        res.json({
            _id: user._id,
            username: user.username,
            email: user.email,
            firstName: user.firstName,
            lastName: user.lastName,
            faculty: user.faculty,
            major: user.major,
            groupCode: user.groupCode,
            role: user.role,
            avatar: user.avatar,
            status: user.status,
            isOnline: user.isOnline,
            createdAt: user.createdAt,
            updatedAt: user.updatedAt,
            lastLogin: user.lastLogin,
            // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ)
            messageCount: user.messageCount || 0,
            chatRoomsCount: user.chatRoomsCount || 0,
            fileUploadsCount: user.fileUploadsCount || 0
        });
    } else {
        res.status(404);
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
    }
});

// @desc    Get current user info
// @route   GET /api/users/me
// @access  Private
const getCurrentUser = asyncHandler(async (req, res) => {
    const user = await User.findById(req.user._id).select('-password');
    
    if (user) {
        res.json({
            _id: user._id,
            username: user.username,
            email: user.email,
            firstName: user.firstName,
            lastName: user.lastName,
            faculty: user.faculty,
            major: user.major,
            groupCode: user.groupCode,
            role: user.role,
            avatar: user.avatar,
            status: user.status,
            isOnline: user.isOnline,
            createdAt: user.createdAt,
            updatedAt: user.updatedAt,
            lastLogin: user.lastLogin,
            lastSeen: user.lastSeen
        });
    } else {
        res.status(404);
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
    }
});

// ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
const updateProfile = asyncHandler(async (req, res) => {
    try {
        const userId = req.user._id;
        const { firstName, lastName, email, faculty, major, groupCode } = req.body;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        if (!firstName || !lastName || !email) {
            res.status(400);
            throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const existingUser = await User.findOne({ 
            email: email, 
            _id: { $ne: userId } 
        });

        if (existingUser) {
            res.status(400);
            throw new Error('‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
        }

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        const updatedUser = await User.findByIdAndUpdate(
            userId,
            {
                firstName,
                lastName,
                email,
                faculty,
                major,
                groupCode
            },
            { 
                new: true,
                select: '-password'
            }
        );

        if (!updatedUser) {
            res.status(404);
            throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
        }

        res.json(updatedUser);
    } catch (error) {
        console.error('Error updating profile:', error);
        if (error.code === 11000) {
            res.status(400);
            throw new Error('‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
        }
        throw error;
    }
});

// ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
const uploadAvatar = asyncHandler(async (req, res) => {
    try {
        const userId = req.user._id;

        if (!req.file) {
            res.status(400);
            throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û');
        }

        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π avatar ‡πÄ‡∏Å‡πà‡∏≤
        const existingUser = await User.findById(userId);
        if (!existingUser) {
            res.status(404);
            throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
        }

        // ‡∏•‡∏ö‡∏£‡∏π‡∏õ avatar ‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å Cloudinary ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if (existingUser.avatar) {
            try {
                await deleteOldAvatar(existingUser.avatar);
                console.log('‚úÖ Old avatar deleted from Cloudinary');
            } catch (deleteError) {
                console.error('‚ùå Error deleting old avatar from Cloudinary:', deleteError);
                // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ error ‡∏ô‡∏µ‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
            }
        }

        // ‡πÉ‡∏ä‡πâ URL ‡∏à‡∏≤‡∏Å Cloudinary ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å multer
        const avatarUrl = req.file.path;
        console.log('üì∏ New avatar URL from Cloudinary:', avatarUrl);

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• avatar ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const updatedUser = await User.findByIdAndUpdate(
            userId,
            { avatar: avatarUrl },
            { 
                new: true,
                select: '-password'
            }
        );

        console.log('‚úÖ Avatar updated successfully for user:', userId);

        res.json({
            message: '‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            avatar: avatarUrl,
            user: {
                _id: updatedUser._id,
                firstName: updatedUser.firstName,
                lastName: updatedUser.lastName,
                username: updatedUser.username,
                avatar: updatedUser.avatar
            }
        });
    } catch (error) {
        console.error('Error uploading avatar:', error);
        throw error;
    }
});

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Push Token
const updatePushToken = asyncHandler(async (req, res) => {
    try {
        const userId = req.user._id;
        const { pushToken } = req.body;

        console.log('üîî Updating push token for user:', userId, 'Token:', pushToken ? 'SET' : 'REMOVE');

        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö token (logout)
        if (!pushToken) {
            const updatedUser = await User.findByIdAndUpdate(
                userId,
                { pushToken: null },
                { new: true, select: '-password' }
            );
            
            console.log('üóëÔ∏è Push token removed for user:', userId);
            return res.json({
                message: '‡∏•‡∏ö Push Token ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
                pushToken: null
            });
        }

        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ã‡πá‡∏ï token ‡πÉ‡∏´‡∏°‡πà
        // ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏∑‡πà‡∏ô ‡∏•‡∏ö token ‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        const existingTokenUser = await User.findOne({ pushToken });
        if (existingTokenUser && existingTokenUser._id.toString() !== userId.toString()) {
            console.log(`‚ö†Ô∏è DUPLICATE TOKEN DETECTED! Removing token from previous user: ${existingTokenUser._id} (${existingTokenUser.firstName} ${existingTokenUser.lastName})`);
            await User.findByIdAndUpdate(existingTokenUser._id, { pushToken: null });
            console.log(`‚úÖ Token removed from previous user: ${existingTokenUser._id}`);
        }

        // ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏ã‡πá‡∏ï token ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        const updatedUser = await User.findByIdAndUpdate(
            userId,
            { pushToken },
            { new: true, select: '-password' }
        );

        if (!updatedUser) {
            res.status(404);
            throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
        }

        console.log(`‚úÖ Push token set for user: ${userId} (${updatedUser.firstName} ${updatedUser.lastName})`);
        res.json({
            message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Push Token ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            pushToken
        });
    } catch (error) {
        console.error('‚ùå Error updating push token:', error);
        throw error;
    }
});

// ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á admin permission)
const getUsersForGroupCreation = asyncHandler(async (req, res) => {
    try {
        const currentUserId = req.user._id;
        const currentUserRole = req.user.role;
        
        console.log('Getting users for group creation, user role:', currentUserRole);

        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î role filter ‡∏ï‡∏≤‡∏° role ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        let roleFilter = {};
        if (currentUserRole === 'student') {
            // ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå
            roleFilter = { role: { $in: ['student', '‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå', 'teacher'] } };
        } else if (currentUserRole === '‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå' || currentUserRole === 'teacher') {
            // ‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô admin
            roleFilter = { role: { $ne: 'admin' } };
        } else if (currentUserRole === 'admin') {
            // admin ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
            roleFilter = { role: { $ne: 'admin' } };
        }

        const users = await User.find({
            $and: [
                roleFilter,
                { _id: { $ne: currentUserId } }, // ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
            ]
        }).select('firstName lastName avatar role classCode')
          .sort({ firstName: 1, lastName: 1 });

        console.log(`Found ${users.length} users for group creation`);
        res.json(users);
    } catch (error) {
        console.error('Error getting users for group creation:', error);
        res.status(500).json({ message: 'Server error', error: error.message });
    }
});

const getMajors = asyncHandler(async (req, res) => {
    try {
        // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å user ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ (‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÅ‡∏Ñ‡πà teacher)
        // const currentUserRole = req.user.role;
        
        // if (currentUserRole !== '‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå' && currentUserRole !== 'teacher') {
        //     return res.status(403).json({ message: '‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤‡πÑ‡∏î‡πâ' });
        // }

        // ‡∏´‡∏≤‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤
        const majors = await User.aggregate([
            {
                $match: {
                    major: { $exists: true, $ne: null, $ne: '', $ne: '1' },
                    role: { $ne: 'admin' }
                }
            },
            {
                $group: {
                    _id: '$major',
                    users: { $addToSet: '$_id' },
                    classCodes: { 
                        $addToSet: {
                            $cond: [
                                { $ne: ['$classCode', null] },
                                '$classCode',
                                '$groupCode'
                            ]
                        }
                    }
                }
            },
            {
                $project: {
                    major: '$_id',
                    userCount: { $size: '$users' },
                    classCodeCount: { 
                        $size: {
                            $filter: {
                                input: '$classCodes',
                                cond: { $and: [{ $ne: ['$$this', null] }, { $ne: ['$$this', ''] }, { $ne: ['$$this', '1'] }] }
                            }
                        }
                    },
                    _id: 0
                }
            },
            {
                $sort: { major: 1 }
            }
        ]);

        console.log(`Found ${majors.length} majors`);
        res.json(majors);
    } catch (error) {
        console.error('Error getting majors:', error);
        res.status(500).json({ message: 'Server error', error: error.message });
    }
});

const getClassCodesByMajor = asyncHandler(async (req, res) => {
    try {
        const { major } = req.params;
        // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ (‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÅ‡∏Ñ‡πà teacher)
        // const currentUserRole = req.user.role;
        
        // if (currentUserRole !== '‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå' && currentUserRole !== 'teacher') {
        //     return res.status(403).json({ message: '‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ' });
        // }

        // ‡∏´‡∏≤ groupCode ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏≤‡∏Ç‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        const classCodes = await User.aggregate([
            {
                $match: {
                    major: major,
                    groupCode: { $exists: true, $ne: null, $ne: '', $ne: '1' },
                    role: { $ne: 'admin' }
                }
            },
            {
                $group: {
                    _id: '$groupCode',
                    userCount: { $sum: 1 }
                }
            },
            {
                $match: {
                    _id: { $ne: null, $ne: '', $ne: '1' }
                }
            },
            {
                $project: {
                    classCode: '$_id',
                    userCount: 1,
                    _id: 0
                }
            },
            {
                $sort: { classCode: 1 }
            }
        ]);

        console.log(`Found ${classCodes.length} class codes for major: ${major}`);
        res.json(classCodes);
    } catch (error) {
        console.error('Error getting class codes by major:', error);
        res.status(500).json({ message: 'Server error', error: error.message });
    }
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°
const getClassCodes = asyncHandler(async (req, res) => {
    try {
        const currentUserRole = req.user.role;
        
        if (currentUserRole !== '‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå' && currentUserRole !== 'teacher') {
            return res.status(403).json({ message: '‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ' });
        }

        // ‡∏´‡∏≤ classCode ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ class
        const classCodes = await User.aggregate([
            {
                $match: {
                    $or: [
                        { classCode: { $exists: true, $ne: null, $ne: '' } },
                        { groupCode: { $exists: true, $ne: null, $ne: '' } }
                    ],
                    role: { $ne: 'admin' }
                }
            },
            {
                $group: {
                    _id: {
                        $cond: [
                            { $ne: ['$classCode', null] },
                            '$classCode',
                            '$groupCode'
                        ]
                    },
                    userCount: { $sum: 1 }
                }
            },
            {
                $match: {
                    _id: { $ne: null, $ne: '' }
                }
            },
            {
                $project: {
                    classCode: '$_id',
                    userCount: 1,
                    _id: 0
                }
            },
            {
                $sort: { classCode: 1 }
            }
        ]);

        console.log(`Found ${classCodes.length} class codes`);
        res.json(classCodes);
    } catch (error) {
        console.error('Error getting class codes:', error);
        res.status(500).json({ message: 'Server error', error: error.message });
    }
});

const getUsersByClassCode = asyncHandler(async (req, res) => {
    try {
        const { classCode } = req.params;
        const currentUserId = req.user._id;
        const currentUserRole = req.user.role;
        
        if (currentUserRole !== '‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå' && currentUserRole !== 'teacher') {
            return res.status(403).json({ message: '‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ' });
        }

        const users = await User.find({
            groupCode: classCode,
            _id: { $ne: currentUserId }, // ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
            role: { $ne: 'admin' } // ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° admin
        }).select('firstName lastName avatar role groupCode')
          .sort({ firstName: 1, lastName: 1 });

        console.log(`Found ${users.length} users in class ${classCode}`);
        res.json(users);
    } catch (error) {
        console.error('Error getting users by class code:', error);
        res.status(500).json({ message: 'Server error', error: error.message });
    }
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
const getUsersForGroupCreation_OLD = asyncHandler(async (req, res) => {
    try {
        const currentUserId = req.user._id;
        const currentUserRole = req.user.role;
        
        console.log('Getting users for group creation. Current user role:', currentUserRole);

        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î role filter ‡∏ï‡∏≤‡∏° role ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        let roleFilter = {};
        if (currentUserRole === 'student') {
            // ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞ student ‡πÅ‡∏•‡∏∞ teacher ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            roleFilter = { role: { $in: ['student', 'teacher'] } };
        } else if (currentUserRole === 'teacher') {
            // teacher ‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å role ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô admin
            roleFilter = { role: { $ne: 'admin' } };
        } else if (currentUserRole === 'admin') {
            // admin ‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å role
            roleFilter = {};
        }

        const users = await User.find({
            $and: [
                roleFilter,
                { _id: { $ne: currentUserId } } // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
            ]
        })
        .select('firstName lastName username role avatar')
        .sort({ firstName: 1, lastName: 1 })
        .limit(100); // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 100 ‡∏Ñ‡∏ô

        console.log(`Found ${users.length} users for group creation`);

        res.json(users);
    } catch (error) {
        console.error('Error getting users for group creation:', error);
        res.status(500);
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ');
    }
});

// ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
const changePassword = asyncHandler(async (req, res) => {
    try {
        const userId = req.user._id;
        const { currentPassword, newPassword } = req.body;

        if (!currentPassword || !newPassword) {
            res.status(400);
            throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà');
        }

        if (newPassword.length < 6) {
            res.status(400);
            throw new Error('‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£');
        }

        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏° password field
        const user = await User.findById(userId).select('+password');
        if (!user) {
            res.status(404);
            throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        const bcrypt = require('bcryptjs');
        const isPasswordValid = await bcrypt.compare(currentPassword, user.password);
        if (!isPasswordValid) {
            res.status(400);
            throw new Error('‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
        }

        // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
        const saltRounds = 10;
        const hashedNewPassword = await bcrypt.hash(newPassword, saltRounds);

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
        await User.findByIdAndUpdate(userId, { 
            password: hashedNewPassword 
        });

        console.log('‚úÖ Password changed successfully for user:', userId);

        res.json({
            message: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß'
        });
    } catch (error) {
        console.error('Error changing password:', error);
        throw error;
    }
});

module.exports = {
    authUser,
    registerUser,
    getUserProfile,
    updateUserProfile,
    getUserById,
    getCurrentUser,
    getUsers,
    deleteUser,
    cleanupOrphanedData,
    createUser,
    searchUsers,
    updateUser,
    updateProfile,
    uploadAvatar,
    changePassword,
    updatePushToken,
    getUsersForGroupCreation,
    getMajors,
    getClassCodes,
    getClassCodesByMajor,
    getUsersByClassCode
};