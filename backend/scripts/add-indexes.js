const mongoose = require('mongoose');
require('dotenv').config();

// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB
const connectDB = async () => {
  try {
    const conn = await mongoose.connect(process.env.MONGODB_URI);
    console.log(`‚úÖ MongoDB Connected: ${conn.connection.host}`);
  } catch (error) {
    console.error('‚ùå Database connection error:', error);
    process.exit(1);
  }
};

const addIndexes = async () => {
  try {
    await connectDB();
    
    console.log('üîß Adding database indexes for performance...');
    
    const db = mongoose.connection.db;
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° compound index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö participants field ‡πÉ‡∏ô chatrooms
    try {
      await db.collection('chatrooms').createIndex(
        { participants: 1 },
        { 
          name: 'participants_1',
          background: true 
        }
      );
      console.log('‚úÖ Created index: participants_1 on chatrooms');
    } catch (error) {
      console.log('‚ÑπÔ∏è Index participants_1 already exists');
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° compound index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ participants + size
    try {
      await db.collection('chatrooms').createIndex(
        { participants: 1, createdAt: -1 },
        { 
          name: 'participants_createdAt',
          background: true 
        }
      );
      console.log('‚úÖ Created index: participants_createdAt on chatrooms');
    } catch (error) {
      console.log('‚ÑπÔ∏è Index participants_createdAt already exists');
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user lookups
    try {
      await db.collection('users').createIndex(
        { _id: 1, firstName: 1, lastName: 1 },
        { 
          name: 'user_basic_info',
          background: true 
        }
      );
      console.log('‚úÖ Created index: user_basic_info on users');
    } catch (error) {
      console.log('‚ÑπÔ∏è Index user_basic_info already exists');
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö messages
    try {
      await db.collection('messages').createIndex(
        { chatroom_id: 1, timestamp: -1 },
        { 
          name: 'chatroom_timestamp',
          background: true 
        }
      );
      console.log('‚úÖ Created index: chatroom_timestamp on messages');
    } catch (error) {
      console.log('‚ÑπÔ∏è Index chatroom_timestamp already exists');
    }

    console.log('üéâ All indexes created successfully!');
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ indexes ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    console.log('\nüìã Current indexes on chatrooms:');
    const chatroomIndexes = await db.collection('chatrooms').indexes();
    chatroomIndexes.forEach(index => {
      console.log(`  - ${index.name}: ${JSON.stringify(index.key)}`);
    });

    console.log('\nüìã Current indexes on users:');
    const userIndexes = await db.collection('users').indexes();
    userIndexes.forEach(index => {
      console.log(`  - ${index.name}: ${JSON.stringify(index.key)}`);
    });

    console.log('\nüìã Current indexes on messages:');
    const messageIndexes = await db.collection('messages').indexes();
    messageIndexes.forEach(index => {
      console.log(`  - ${index.name}: ${JSON.stringify(index.key)}`);
    });

  } catch (error) {
    console.error('‚ùå Error adding indexes:', error);
  } finally {
    mongoose.connection.close();
    process.exit(0);
  }
};

addIndexes();
