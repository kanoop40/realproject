const mongoose = require('mongoose');
const fs = require('fs');
const path = require('path');
const User = require('./models/UserModel');
require('dotenv').config();

const cleanOldAvatars = async () => {
    try {
        console.log('üßπ Starting cleanup of old avatars...');
        
        // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB
        await mongoose.connect(process.env.MONGO_URI);
        console.log('‚úÖ Connected to MongoDB');
        
        // ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ avatar
        const users = await User.find({ avatar: { $exists: true, $ne: null } });
        console.log(`üë• Found ${users.length} users with avatars`);
        
        // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå avatars
        const avatarDir = path.join(__dirname, 'uploads', 'avatars');
        const allFiles = fs.readdirSync(avatarDir).filter(file => file.endsWith('.jpg'));
        console.log(`üìÅ Found ${allFiles.length} avatar files`);
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ avatar ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        const usedAvatars = users
            .map(user => user.avatar)
            .filter(avatar => avatar)
            .map(avatar => path.basename(avatar));
        
        console.log(`üîó ${usedAvatars.length} avatars currently in use`);
        console.log('Used avatars:', usedAvatars);
        
        // ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        const unusedFiles = allFiles.filter(file => !usedAvatars.includes(file));
        
        console.log(`üóëÔ∏è Found ${unusedFiles.length} unused avatar files`);
        
        if (unusedFiles.length > 0) {
            console.log('Unused files:', unusedFiles);
            
            // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            let deletedCount = 0;
            for (const file of unusedFiles) {
                try {
                    const filePath = path.join(avatarDir, file);
                    fs.unlinkSync(filePath);
                    console.log(`‚úÖ Deleted: ${file}`);
                    deletedCount++;
                } catch (error) {
                    console.error(`‚ùå Error deleting ${file}:`, error.message);
                }
            }
            
            console.log(`üéâ Cleanup completed! Deleted ${deletedCount} unused avatar files`);
        } else {
            console.log('‚ú® No unused avatar files found');
        }
        
    } catch (error) {
        console.error('‚ùå Error during cleanup:', error);
    } finally {
        mongoose.disconnect();
    }
};

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ script
if (require.main === module) {
    cleanOldAvatars();
}

module.exports = cleanOldAvatars;
