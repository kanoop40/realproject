require('dotenv').config();
const mongoose = require('mongoose');
const Chatrooms = require('./models/ChatroomsModel');
const Messages = require('./models/MessagesModel');

async function cleanupOldChats() {
    try {
        console.log('üîó Connecting to MongoDB...');
        await mongoose.connect(process.env.MONGO_URI);
        console.log('‚úÖ Connected to MongoDB');
        
        // ‡∏´‡∏≤‡πÅ‡∏ä‡∏ó‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ user_id structure ‡πÄ‡∏Å‡πà‡∏≤
        console.log('üîç Finding old chat structure...');
        const oldChats = await Chatrooms.find({
            user_id: { $exists: true, $ne: [] }
        });
        
        console.log(`üìã Found ${oldChats.length} old chats to clean up`);
        
        if (oldChats.length > 0) {
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ä‡∏ó‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö
            console.log('üìã Chats to be deleted:');
            oldChats.forEach((chat, index) => {
                console.log(`${index + 1}. ${chat.roomName} (${chat._id})`);
            });
            
            // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
            console.log('üóëÔ∏è Deleting related messages...');
            for (const chat of oldChats) {
                const messagesResult = await Messages.deleteMany({ chat_id: chat._id });
                console.log(`üóëÔ∏è Deleted ${messagesResult.deletedCount} messages for chat ${chat._id}`);
            }
            
            // ‡∏•‡∏ö‡πÅ‡∏ä‡∏ó
            console.log('üóëÔ∏è Deleting old chats...');
            const deleteResult = await Chatrooms.deleteMany({
                user_id: { $exists: true, $ne: [] }
            });
            console.log(`üóëÔ∏è Deleted ${deleteResult.deletedCount} old chats`);
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ä‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
        const remainingChats = await Chatrooms.find({}).populate('participants', 'firstName lastName');
        console.log(`‚úÖ Remaining chats: ${remainingChats.length}`);
        
        if (remainingChats.length > 0) {
            console.log('üìã Current chats:');
            remainingChats.forEach((chat, index) => {
                const participantNames = chat.participants?.map(p => `${p.firstName} ${p.lastName}`).join(', ') || 'No participants';
                console.log(`${index + 1}. ${chat.roomName} - Participants: ${participantNames}`);
            });
        }
        
        console.log('‚úÖ Cleanup completed successfully');
        process.exit(0);
    } catch (error) {
        console.error('‚ùå Error during cleanup:', error);
        process.exit(1);
    }
}

cleanupOldChats();
